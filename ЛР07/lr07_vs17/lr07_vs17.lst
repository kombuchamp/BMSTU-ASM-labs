Microsoft (R) Macro Assembler Version 14.15.26730.0	    11/10/18 02:25:25
function.asm						     Page 1 - 1


				; Регистры флагов в VS
				; | Overflow  | OV |
				; | Direction | UP |
				; | Interrupt | EI |
				; | Sign      | PL |
				; | Zero      | ZR |
				; | Auxiliary | AC |
				; | Parity    | PE |
				; | Carry     | CY |

				.386
				.MODEL FLAT, C
					public function
				.STACK
 00000000			.DATA
 00000000 00000007			SELECTED DD 7
 00000004 00000012 R			OPTIONS DD proc0, proc1, proc2, proc3, proc4, proc5, proc6, proc7, proc8
	   00000013 R
	   00000014 R
	   00000049 R
	   0000006D R
	   000000AF R
	   000000D3 R
	   00000118 R
	   0000013C R
 00000028 FFFF				X DW 0FFFFh
 0000002A  00000011 [			ARR DB 17 DUP ('+')
	    2B
	   ]

 0000003B 30 31 32 33 34		HEXNUMS DB '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' 
	   35 36 37 38 39
	   41 42 43 44 45
	   46
 00000000			.CODE
 00000000				function PROC	
						; В EBX адрес массива ARR. Во время отладки скопировать адрес и таким образом найти массив в памяти
 00000000  BB 0000002A R			mov ebx, offset arr


 00000005  A1 00000000 R			mov eax, SELECTED
 0000000A  FF 14 85				CALL OPTIONS[eax*4]
	   00000004 R

 00000011  C3					ret
 00000012				function ENDP
					



					;// Вывод пунктов меню
 00000012				proc0 PROC
 00000012  C3					ret
 00000013				proc0 ENDP
					
					;// ввод (не рассматривается)
 00000013				proc1 PROC
 00000013  C3					ret
 00000014				proc1 ENDP
					
					;// вывод на экран (в массив символов в памяти)
					;// с новой строки значения из ячейки Х в форме двоичного целого без знака
					;// и без лидирующих нулей (использовать команды сдвига).
 00000014				proc2 PROC
 00000014  66| 8B 1D				mov bx, x ;//  число
	   00000028 R
 0000001B  66| B9 0010				mov cx, 16 ;// Размер массива 
 0000001F  66| BE 0000				mov si,0 ;// Индекс в массиве вывода
						
 00000023  EB 02				jmp output
 00000025					counter_decrement:
 00000025  66| 49					dec cx
 00000027					output:
 00000027  66| D1 E3					shl bx, 1
 0000002A  0F 92 C0					setc al ;// al = CF ? 1 : 0
							; Проверяем, если в переносе 0
 0000002D  3C 00					cmp al, 0
 0000002F  74 02					jz check_if_preceding_zero
 00000031  EB 08					jmp actual_output
							; Проверяем, если это лидирующий ноль
 00000033						check_if_preceding_zero:
 00000033  66| 83 FE 00						cmp si, 0
 00000037  74 EC						jz counter_decrement
 00000039  EB 0D						jmp proc2_exit
 0000003B						actual_output:
 0000003B  04 30						add al,'0'
 0000003D  88 04 35						mov arr[si+1],al ;// со второго символа, в первом знак
	   0000002B R
 00000044  66| 46						inc si
 00000046  E2 DF				loop output

 00000048					proc2_exit:

 00000048  C3					ret
 00000049				proc2 ENDP

					;// вывод на экран с новой строки значения из ячейки Х
					;// в форме двоичного целого со знаком и без лидирующих нулей 
					;// (использовать команду NEG и процедуру предыдущего пункта).
 00000049				proc3 PROC
						;// Проверяем старший бит числа
 00000049  66| 0F BA 25				bt X,15
	   00000028 R 0F
 00000052  0F 92 C0				setc al
 00000055  3C 00				cmp al, 0
 00000057  74 0E				jz proc3_output
 00000059  66| F7 1D				neg x
	   00000028 R
 00000060  C6 05 0000002A R			mov arr[0], '-'
	   2D
 00000067					proc3_output:
 00000067  E8 FFFFFFA8				call proc2


 0000006C  C3					ret
 0000006D				proc3 ENDP

					;// вывод на экран с новой строки значения из ячейки Х 
					;// в форме десятичного целого без знака 
					;// (использовать команду деления. через остаток от деления).
 0000006D				proc4 PROC
						;// Очистка регистров
 0000006D  B8 00000000				mov eax, 0
 00000072  BB 00000000				mov ebx, 0
 00000077  BA 00000000				mov edx, 0
 0000007C  B9 00000000				mov ecx, 0
						
						;// DIV:
						;//	----EDX:EAX - Делимое
						;//	----EAX - Частное
						;//	----EDX - Остаток

 00000081  BB 0000000A				mov ebx, 10	;// Делитель 
 00000086  66| A1				mov ax, x 
	   00000028 R
 0000008C					proc4_snap_number:
 0000008C  BA 00000000					mov edx, 0
 00000091  66| F7 F3					div bx
 00000094  83 C2 30					add edx, '0'
 00000097  66| 41					inc cx
 00000099  52						push edx
 0000009A  83 F8 00					cmp eax, 0
 0000009D  75 ED					jne proc4_snap_number

 0000009F  BB 00000001				mov ebx, 1
 000000A4					proc4_output:
 000000A4  58						pop eax
 000000A5  88 83 0000002A R				mov arr[ebx], al
 000000AB  43						inc ebx
 000000AC  E2 F6					loop proc4_output
						

 000000AE  C3					ret
 000000AF				proc4 ENDP

					;// вывод на экран с новой строки значения из ячейки Х 
					;// в форме десятичного целого со знаком 
					;// (использовать команду NEG и процедуру предыдущего пункта).
 000000AF				proc5 PROC
						;// Проверяем старший бит числа
 000000AF  66| 0F BA 25				bt X,15
	   00000028 R 0F
 000000B8  0F 92 C0				setc al
 000000BB  3C 00				cmp al, 0
 000000BD  74 0E				jz proc5_output
 000000BF  66| F7 1D				neg x
	   00000028 R
 000000C6  C6 05 0000002A R			mov arr[0], '-'
	   2D
 000000CD					proc5_output:
 000000CD  E8 FFFFFF9B				call proc4
 000000D2  C3					ret
 000000D3				proc5 ENDP

					;// вывод на экран с новой строки значения из ячейки Х 
					;// в форме шестнадцатеричного целого без знака 
					;// (использовать команды циклического сдвига и конъюнкции).
 000000D3				proc6 PROC
						;// Очистка регистров
 000000D3  B8 00000000				mov eax, 0
 000000D8  BB 00000000				mov ebx, 0
 000000DD  BA 00000000				mov edx, 0
 000000E2  B9 00000000				mov ecx, 0
						
						;// DIV:
						;//	----EDX:EAX - Делимое
						;//	----EAX - Частное
						;//	----EDX - Остаток

 000000E7  BB 00000010				mov ebx, 16	;// Делитель 
 000000EC  66| A1				mov ax, x 
	   00000028 R
 000000F2					proc6_snap_number:
 000000F2  BA 00000000					mov edx, 0
 000000F7  66| F7 F3					div bx
 000000FA  66| 41					inc cx
 000000FC  52						push edx
 000000FD  83 F8 00					cmp eax, 0
 00000100  75 F0					jne proc6_snap_number

 00000102  BB 00000001				mov ebx, 1
 00000107					proc6_output:
 00000107  58						pop eax
 00000108  8A 90 0000003B R				mov dl, hexnums[eax]
 0000010E  88 93 0000002A R				mov arr[ebx], dl
 00000114  43						inc ebx
 00000115  E2 F0					loop proc6_output
						
 00000117  C3					ret
 00000118				proc6 ENDP

					;// вывод на экран с новой строки значения из ячейки Х 
					;// в форме шестнадцатеричного целого со знаком 
					;// (использовать команду NEG и процедуру предыдущего пункта).
 00000118				proc7 PROC
						;// Проверяем старший бит числа
 00000118  66| 0F BA 25				bt X,15
	   00000028 R 0F
 00000121  0F 92 C0				setc al
 00000124  3C 00				cmp al, 0
 00000126  74 0E				jz proc7_output
 00000128  66| F7 1D				neg x
	   00000028 R
 0000012F  C6 05 0000002A R			mov arr[0], '-'
	   2D
 00000136					proc7_output:
 00000136  E8 FFFFFF98				call proc6
 0000013B  C3					ret
 0000013C				proc7 ENDP

					;// выход
 0000013C				proc8 PROC
 0000013C  C3					ret
 0000013D				proc8 ENDP

				END
Microsoft (R) Macro Assembler Version 14.15.26730.0	    11/10/18 02:25:25
function.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000400 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000004B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000013D DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

function . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000012 Public C
proc0  . . . . . . . . . . . . .	P Near	 00000012 _TEXT	Length= 00000001 Public C
proc1  . . . . . . . . . . . . .	P Near	 00000013 _TEXT	Length= 00000001 Public C
proc2  . . . . . . . . . . . . .	P Near	 00000014 _TEXT	Length= 00000035 Public C
  counter_decrement  . . . . . .	L Near	 00000025 _TEXT	
  output . . . . . . . . . . . .	L Near	 00000027 _TEXT	
  check_if_preceding_zero  . . .	L Near	 00000033 _TEXT	
  actual_output  . . . . . . . .	L Near	 0000003B _TEXT	
  proc2_exit . . . . . . . . . .	L Near	 00000048 _TEXT	
proc3  . . . . . . . . . . . . .	P Near	 00000049 _TEXT	Length= 00000024 Public C
  proc3_output . . . . . . . . .	L Near	 00000067 _TEXT	
proc4  . . . . . . . . . . . . .	P Near	 0000006D _TEXT	Length= 00000042 Public C
  proc4_snap_number  . . . . . .	L Near	 0000008C _TEXT	
  proc4_output . . . . . . . . .	L Near	 000000A4 _TEXT	
proc5  . . . . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 00000024 Public C
  proc5_output . . . . . . . . .	L Near	 000000CD _TEXT	
proc6  . . . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 00000045 Public C
  proc6_snap_number  . . . . . .	L Near	 000000F2 _TEXT	
  proc6_output . . . . . . . . .	L Near	 00000107 _TEXT	
proc7  . . . . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 00000024 Public C
  proc7_output . . . . . . . . .	L Near	 00000136 _TEXT	
proc8  . . . . . . . . . . . . .	P Near	 0000013C _TEXT	Length= 00000001 Public C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ARR  . . . . . . . . . . . . . .	Byte	 0000002A _DATA	
HEXNUMS  . . . . . . . . . . . .	Byte	 0000003B _DATA	
OPTIONS  . . . . . . . . . . . .	DWord	 00000004 _DATA	
SELECTED . . . . . . . . . . . .	DWord	 00000000 _DATA	
X  . . . . . . . . . . . . . . .	Word	 00000028 _DATA	

	   0 Warnings
	   0 Errors
